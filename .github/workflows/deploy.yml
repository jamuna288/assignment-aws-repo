name: Deploy Agent to EC2

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Sample_Agent/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Sample_Agent/**'

env:
  PYTHON_VERSION: '3.9'
  APPLICATION_NAME: 'sample-agent'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('Sample_Agent/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd Sample_Agent
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      run: |
        cd Sample_Agent
        python -m pytest tests/ -v || echo "No tests found, skipping..."

    - name: Lint code
      run: |
        cd Sample_Agent
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment package
      run: |
        cd Sample_Agent
        tar -czf ../agent-deployment.tar.gz .
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: agent-deployment
        path: agent-deployment.tar.gz
        retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: agent-deployment

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Copy deployment package to S3
      run: |
        aws s3 cp agent-deployment.tar.gz s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployments/agent-deployment-${{ github.sha }}.tar.gz

    - name: Deploy to EC2
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "#!/bin/bash",
            "set -e",
            "echo \"Starting deployment at $(date)\"",
            "cd /opt/agent",
            "sudo systemctl stop agent-service || true",
            "aws s3 cp s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployments/agent-deployment-${{ github.sha }}.tar.gz /tmp/",
            "sudo rm -rf /opt/agent/current/*",
            "sudo tar -xzf /tmp/agent-deployment-${{ github.sha }}.tar.gz -C /opt/agent/current/",
            "sudo chown -R agent:agent /opt/agent/current/",
            "cd /opt/agent/current",
            "sudo -u agent python -m venv venv",
            "sudo -u agent ./venv/bin/pip install --upgrade pip",
            "sudo -u agent ./venv/bin/pip install -r requirements.txt",
            "sudo systemctl start agent-service",
            "sudo systemctl enable agent-service",
            "sleep 10",
            "curl -f http://localhost:8000/docs || (echo \"Health check failed\" && exit 1)",
            "echo \"Deployment completed successfully at $(date)\""
          ]' \
          --targets "Key=tag:Environment,Values=${{ secrets.ENVIRONMENT }}" \
          --cloud-watch-output-config CloudWatchOutputEnabled=true,CloudWatchLogGroupName=/aws/ssm/deployment-logs

    - name: Verify deployment
      run: |
        sleep 30
        COMMAND_ID=$(aws ssm list-commands --max-items 1 --query 'Commands[0].CommandId' --output text)
        STATUS=$(aws ssm get-command-invocation --command-id $COMMAND_ID --instance-id ${{ secrets.EC2_INSTANCE_ID }} --query 'Status' --output text)
        
        if [ "$STATUS" != "Success" ]; then
          echo "Deployment failed with status: $STATUS"
          aws ssm get-command-invocation --command-id $COMMAND_ID --instance-id ${{ secrets.EC2_INSTANCE_ID }} --query 'StandardErrorContent' --output text
          exit 1
        fi
        
        echo "Deployment verified successfully"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful for commit ${{ github.sha }}"
        else
          echo "❌ Deployment failed for commit ${{ github.sha }}"
        fi

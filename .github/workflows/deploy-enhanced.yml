name: Enhanced Agent Deployment with Rollback & Notifications

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Sample_Agent/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Sample_Agent/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment Action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback
      version:
        description: 'Version to rollback to (for rollback action)'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.9'
  APPLICATION_NAME: 'flight-agent'

jobs:
  # Generate version and prepare deployment
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      short_sha: ${{ steps.version.outputs.short_sha }}
      deployment_tag: ${{ steps.version.outputs.deployment_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate version and tags
      id: version
      run: |
        # Generate semantic version
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Production version
          VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          ENVIRONMENT="production"
        else
          # Development version
          VERSION="v$(date +%Y.%m.%d)-dev-$(git rev-parse --short HEAD)"
          ENVIRONMENT="staging"
        fi
        
        SHORT_SHA=$(git rev-parse --short HEAD)
        DEPLOYMENT_TAG="${ENVIRONMENT}-${VERSION}"
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "deployment_tag=${DEPLOYMENT_TAG}" >> $GITHUB_OUTPUT
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        
        echo "üè∑Ô∏è Generated version: ${VERSION}"
        echo "üéØ Deployment tag: ${DEPLOYMENT_TAG}"

  # Run tests
  test:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('Sample_Agent/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd Sample_Agent
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx flake8

    - name: Run tests
      run: |
        cd Sample_Agent
        echo "üß™ Running unit tests..."
        python -m pytest tests/ -v --tb=short || echo "‚ö†Ô∏è No tests found, continuing..."

    - name: Lint code
      run: |
        cd Sample_Agent
        echo "üîç Running code linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security scan
      run: |
        cd Sample_Agent
        echo "üîí Running security scan..."
        pip install bandit
        bandit -r . -f json -o security-report.json || true
        if [ -f security-report.json ]; then
          echo "üìã Security scan completed"
        fi

  # Build and package
  build:
    needs: [prepare, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.action == 'deploy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment package with version info
      run: |
        cd Sample_Agent
        
        # Add version info to the package
        echo "üè∑Ô∏è Adding version information..."
        cat > version.json << EOF
        {
          "version": "${{ needs.prepare.outputs.version }}",
          "commit_sha": "${{ github.sha }}",
          "short_sha": "${{ needs.prepare.outputs.short_sha }}",
          "deployment_tag": "${{ needs.prepare.outputs.deployment_tag }}",
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "branch": "${{ github.ref_name }}",
          "workflow_run_id": "${{ github.run_id }}"
        }
        EOF
        
        # Create deployment package
        echo "üì¶ Creating deployment package..."
        tar -czf ../agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz .
        
        # Create checksum
        cd ..
        sha256sum agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz > agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz.sha256
        
        echo "‚úÖ Deployment package created: agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz"
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: agent-deployment-${{ needs.prepare.outputs.deployment_tag }}
        path: |
          agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz
          agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz.sha256
        retention-days: 30

  # Deploy to EC2
  deploy:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event.inputs.action != 'rollback') || github.event.inputs.action == 'deploy'
    environment: production
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: agent-deployment-${{ needs.prepare.outputs.deployment_tag }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Send deployment start notification
      run: |
        echo "üì¢ Sending deployment start notification..."
        
        # Slack notification (if webhook configured)
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "üöÄ Deployment Started",
              "attachments": [{
                "color": "warning",
                "fields": [
                  {"title": "Version", "value": "${{ needs.prepare.outputs.version }}", "short": true},
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "Commit", "value": "${{ needs.prepare.outputs.short_sha }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true}
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

    - name: Upload deployment package to S3 with versioning
      run: |
        echo "‚¨ÜÔ∏è Uploading deployment package to S3..."
        
        # Upload with version tag
        aws s3 cp agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz \
          s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployments/${{ needs.prepare.outputs.deployment_tag }}/agent-deployment.tar.gz \
          --metadata version=${{ needs.prepare.outputs.version }},commit=${{ github.sha }},build-time=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        # Upload checksum
        aws s3 cp agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz.sha256 \
          s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployments/${{ needs.prepare.outputs.deployment_tag }}/agent-deployment.tar.gz.sha256
        
        # Create latest symlink for easy rollback reference
        aws s3 cp agent-deployment-${{ needs.prepare.outputs.deployment_tag }}.tar.gz \
          s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployments/latest/agent-deployment.tar.gz
        
        echo "‚úÖ Deployment package uploaded with version: ${{ needs.prepare.outputs.version }}"

    - name: Deploy to EC2 via AWS SSM
      id: deploy
      run: |
        echo "üöÄ Starting deployment via AWS SSM..."
        
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "#!/bin/bash",
            "set -e",
            "",
            "# Deployment configuration",
            "DEPLOYMENT_TAG=\"${{ needs.prepare.outputs.deployment_tag }}\"",
            "VERSION=\"${{ needs.prepare.outputs.version }}\"",
            "COMMIT_SHA=\"${{ github.sha }}\"",
            "DEPLOY_LOG=\"/opt/agent/logs/deployment.log\"",
            "BACKUP_DIR=\"/opt/agent/releases\"",
            "",
            "# Logging function",
            "deploy_log() {",
            "  echo \"[$(date)] DEPLOY: $1\" | tee -a $DEPLOY_LOG",
            "}",
            "",
            "deploy_log \"üöÄ Starting deployment of version $VERSION\"",
            "deploy_log \"üìã Deployment tag: $DEPLOYMENT_TAG\"",
            "deploy_log \"üìù Commit SHA: $COMMIT_SHA\"",
            "",
            "# Create backup directory",
            "sudo mkdir -p $BACKUP_DIR",
            "",
            "# Download deployment package",
            "deploy_log \"üì¶ Downloading deployment package...\"",
            "aws s3 cp s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployments/$DEPLOYMENT_TAG/agent-deployment.tar.gz /tmp/agent-deployment-$DEPLOYMENT_TAG.tar.gz",
            "aws s3 cp s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployments/$DEPLOYMENT_TAG/agent-deployment.tar.gz.sha256 /tmp/agent-deployment-$DEPLOYMENT_TAG.tar.gz.sha256",
            "",
            "# Verify checksum",
            "deploy_log \"üîç Verifying package integrity...\"",
            "cd /tmp",
            "if sha256sum -c agent-deployment-$DEPLOYMENT_TAG.tar.gz.sha256; then",
            "  deploy_log \"‚úÖ Package integrity verified\"",
            "else",
            "  deploy_log \"‚ùå Package integrity check failed\"",
            "  exit 1",
            "fi",
            "",
            "# Create backup of current deployment",
            "if [ -d \"/opt/agent/current\" ] && [ \"$(ls -A /opt/agent/current)\" ]; then",
            "  BACKUP_NAME=\"backup-$(date +%Y%m%d-%H%M%S)-$VERSION\"",
            "  deploy_log \"üíæ Creating backup: $BACKUP_NAME\"",
            "  sudo cp -r /opt/agent/current $BACKUP_DIR/$BACKUP_NAME",
            "  echo \"$VERSION\" | sudo tee $BACKUP_DIR/$BACKUP_NAME/VERSION > /dev/null",
            "  deploy_log \"‚úÖ Backup created successfully\"",
            "fi",
            "",
            "# Stop service gracefully",
            "deploy_log \"üõë Stopping agent service...\"",
            "sudo systemctl stop agent-service || true",
            "sleep 5",
            "",
            "# Deploy new version",
            "deploy_log \"üìÇ Deploying new version...\"",
            "sudo rm -rf /opt/agent/current/*",
            "sudo tar -xzf /tmp/agent-deployment-$DEPLOYMENT_TAG.tar.gz -C /opt/agent/current/",
            "sudo chown -R agent:agent /opt/agent/current/",
            "",
            "# Setup Python environment",
            "deploy_log \"üêç Setting up Python environment...\"",
            "cd /opt/agent/current",
            "sudo -u agent python3 -m venv venv",
            "sudo -u agent ./venv/bin/pip install --upgrade pip",
            "sudo -u agent ./venv/bin/pip install -r requirements.txt",
            "",
            "# Save version info",
            "echo \"$VERSION\" | sudo tee /opt/agent/current/VERSION > /dev/null",
            "sudo chown agent:agent /opt/agent/current/VERSION",
            "",
            "# Start service",
            "deploy_log \"üöÄ Starting agent service...\"",
            "sudo systemctl daemon-reload",
            "sudo systemctl start agent-service",
            "sudo systemctl enable agent-service",
            "",
            "# Wait for service to start",
            "deploy_log \"‚è≥ Waiting for service to start...\"",
            "sleep 15",
            "",
            "# Health check with retry",
            "deploy_log \"üè• Performing health checks...\"",
            "for i in {1..10}; do",
            "  if curl -f -s http://localhost:8000/health > /dev/null; then",
            "    deploy_log \"‚úÖ Health check passed (attempt $i)\"",
            "    break",
            "  else",
            "    deploy_log \"‚ö†Ô∏è Health check failed (attempt $i), retrying...\"",
            "    sleep 10",
            "  fi",
            "  if [ $i -eq 10 ]; then",
            "    deploy_log \"‚ùå Health check failed after 10 attempts - ROLLING BACK\"",
            "    ",
            "    # Automatic rollback",
            "    LATEST_BACKUP=$(ls -t $BACKUP_DIR/backup-* 2>/dev/null | head -1)",
            "    if [ -n \"$LATEST_BACKUP\" ]; then",
            "      deploy_log \"üîÑ Rolling back to: $LATEST_BACKUP\"",
            "      sudo systemctl stop agent-service || true",
            "      sudo rm -rf /opt/agent/current/*",
            "      sudo cp -r $LATEST_BACKUP/* /opt/agent/current/",
            "      sudo chown -R agent:agent /opt/agent/current/",
            "      sudo systemctl start agent-service",
            "      sleep 10",
            "      if curl -f -s http://localhost:8000/health > /dev/null; then",
            "        deploy_log \"‚úÖ Rollback successful\"",
            "        exit 2  # Special exit code for rollback",
            "      else",
            "        deploy_log \"‚ùå Rollback failed\"",
            "        exit 1",
            "      fi",
            "    else",
            "      deploy_log \"‚ùå No backup available for rollback\"",
            "      exit 1",
            "    fi",
            "  fi",
            "done",
            "",
            "# Clean up old backups (keep last 5)",
            "deploy_log \"üßπ Cleaning up old backups...\"",
            "ls -t $BACKUP_DIR/backup-* 2>/dev/null | tail -n +6 | xargs sudo rm -rf 2>/dev/null || true",
            "",
            "# Clean up deployment files",
            "rm -f /tmp/agent-deployment.tar.gz /tmp/agent-deployment.tar.gz.sha256",
            "",
            "deploy_log \"üéâ Deployment completed successfully!\"",
            "deploy_log \"üìã Version: $VERSION\"",
            "deploy_log \"üåê Service status: $(sudo systemctl is-active agent-service)\"",
            "deploy_log \"üìù Logs: /opt/agent/logs/agent.log\""
          ]' \
          --targets "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --cloud-watch-output-config CloudWatchOutputEnabled=true,CloudWatchLogGroupName=/aws/ssm/deployment-logs \
          --query 'Command.CommandId' --output text)
        
        echo "üìã SSM Command ID: $COMMAND_ID"
        echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

    - name: Wait for deployment completion
      id: wait_deploy
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        
        # Wait for command to complete (max 15 minutes)
        for i in {1..90}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'Status' --output text 2>/dev/null || echo "InProgress")
          
          echo "Deployment status: $STATUS (check $i/90)"
          
          if [ "$STATUS" = "Success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            break
          elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
            echo "‚ùå Deployment failed with status: $STATUS"
            
            # Get error details
            ERROR_OUTPUT=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query 'StandardErrorContent' --output text 2>/dev/null || echo "No error details available")
            
            # Check if it was a rollback (exit code 2)
            EXIT_CODE=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query 'ResponseCode' --output text 2>/dev/null || echo "1")
            
            if [ "$EXIT_CODE" = "2" ]; then
              echo "üîÑ Deployment failed but rollback was successful"
              echo "deployment_status=rolled_back" >> $GITHUB_OUTPUT
            else
              echo "deployment_status=failed" >> $GITHUB_OUTPUT
            fi
            
            echo "error_output<<EOF" >> $GITHUB_OUTPUT
            echo "$ERROR_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            exit 1
          fi
          
          sleep 10
        done
        
        # Timeout check
        if [ "$STATUS" != "Success" ]; then
          echo "‚ùå Deployment timed out. Final status: $STATUS"
          echo "deployment_status=timeout" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Verify deployment
      if: steps.wait_deploy.outputs.deployment_status == 'success'
      run: |
        echo "üîç Verifying deployment..."
        
        # Get instance public IP
        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "üåê Instance IP: $INSTANCE_IP"
        
        # Wait for service to be fully ready
        sleep 30
        
        # Test endpoints
        echo "üß™ Testing application endpoints..."
        
        # Test health endpoint
        if curl -f -s "http://$INSTANCE_IP/health" > /dev/null; then
          echo "‚úÖ Health endpoint responding"
        else
          echo "‚ùå Health endpoint test failed"
          exit 1
        fi
        
        # Test version endpoint
        if curl -f -s "http://$INSTANCE_IP/version" > /dev/null; then
          VERSION_RESPONSE=$(curl -s "http://$INSTANCE_IP/version")
          echo "‚úÖ Version endpoint responding"
          echo "üìã Version info: $VERSION_RESPONSE"
        fi
        
        # Test main functionality
        if curl -f -s -X POST "http://$INSTANCE_IP/recommendation" \
             -H "Content-Type: application/json" \
             -d '{"input_text": "deployment test"}' > /dev/null; then
          echo "‚úÖ Recommendation endpoint responding"
        else
          echo "‚ùå Recommendation endpoint test failed"
          exit 1
        fi
        
        echo "üéâ All verification tests passed!"
        echo "üåê Application is live at: http://$INSTANCE_IP/"

    - name: Send deployment success notification
      if: steps.wait_deploy.outputs.deployment_status == 'success'
      run: |
        echo "üì¢ Sending success notification..."
        
        # Get instance IP for notification
        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        # Slack notification
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚úÖ Deployment Successful!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "${{ needs.prepare.outputs.version }}", "short": true},
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "Commit", "value": "${{ needs.prepare.outputs.short_sha }}", "short": true},
                  {"title": "URL", "value": "http://'$INSTANCE_IP'/", "short": false}
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi
        
        # Email notification (if configured)
        if [ -n "${{ secrets.EMAIL_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "subject": "‚úÖ Agent Deployment Successful - ${{ needs.prepare.outputs.version }}",
              "body": "Deployment completed successfully!\n\nVersion: ${{ needs.prepare.outputs.version }}\nCommit: ${{ needs.prepare.outputs.short_sha }}\nURL: http://'$INSTANCE_IP'/\nTime: $(date)"
            }' \
            ${{ secrets.EMAIL_WEBHOOK_URL }}
        fi

    - name: Send deployment failure notification
      if: failure() || steps.wait_deploy.outputs.deployment_status != 'success'
      run: |
        echo "üì¢ Sending failure notification..."
        
        STATUS="${{ steps.wait_deploy.outputs.deployment_status }}"
        ERROR_MSG="${{ steps.wait_deploy.outputs.error_output }}"
        
        # Slack notification
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚ùå Deployment Failed",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Version", "value": "${{ needs.prepare.outputs.version }}", "short": true},
                  {"title": "Status", "value": "'$STATUS'", "short": true},
                  {"title": "Commit", "value": "${{ needs.prepare.outputs.short_sha }}", "short": true},
                  {"title": "Error", "value": "'$ERROR_MSG'", "short": false}
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

  # Rollback job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Rollback to previous version
      run: |
        echo "üîÑ Starting rollback process..."
        
        ROLLBACK_VERSION="${{ github.event.inputs.version }}"
        
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "#!/bin/bash",
            "set -e",
            "",
            "ROLLBACK_VERSION=\"'$ROLLBACK_VERSION'\"",
            "BACKUP_DIR=\"/opt/agent/releases\"",
            "DEPLOY_LOG=\"/opt/agent/logs/deployment.log\"",
            "",
            "deploy_log() {",
            "  echo \"[$(date)] ROLLBACK: $1\" | tee -a $DEPLOY_LOG",
            "}",
            "",
            "deploy_log \"üîÑ Starting rollback to version: $ROLLBACK_VERSION\"",
            "",
            "# Find backup to rollback to",
            "if [ -n \"$ROLLBACK_VERSION\" ]; then",
            "  BACKUP_PATH=$(find $BACKUP_DIR -name \"*$ROLLBACK_VERSION*\" -type d | head -1)",
            "else",
            "  BACKUP_PATH=$(ls -t $BACKUP_DIR/backup-* 2>/dev/null | head -1)",
            "fi",
            "",
            "if [ -z \"$BACKUP_PATH\" ]; then",
            "  deploy_log \"‚ùå No backup found for rollback\"",
            "  exit 1",
            "fi",
            "",
            "deploy_log \"üìÇ Rolling back to: $BACKUP_PATH\"",
            "",
            "# Stop service",
            "sudo systemctl stop agent-service || true",
            "sleep 5",
            "",
            "# Restore backup",
            "sudo rm -rf /opt/agent/current/*",
            "sudo cp -r $BACKUP_PATH/* /opt/agent/current/",
            "sudo chown -R agent:agent /opt/agent/current/",
            "",
            "# Start service",
            "sudo systemctl start agent-service",
            "sleep 15",
            "",
            "# Health check",
            "if curl -f -s http://localhost:8000/health > /dev/null; then",
            "  deploy_log \"‚úÖ Rollback successful\"",
            "else",
            "  deploy_log \"‚ùå Rollback failed - service not responding\"",
            "  exit 1",
            "fi",
            "",
            "deploy_log \"üéâ Rollback completed successfully\""
          ]' \
          --targets "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --cloud-watch-output-config CloudWatchOutputEnabled=true,CloudWatchLogGroupName=/aws/ssm/rollback-logs \
          --query 'Command.CommandId' --output text)
        
        echo "üìã Rollback Command ID: $COMMAND_ID"
        
        # Wait for rollback completion
        for i in {1..30}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'Status' --output text 2>/dev/null || echo "InProgress")
          
          if [ "$STATUS" = "Success" ]; then
            echo "‚úÖ Rollback completed successfully!"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "‚ùå Rollback failed"
            exit 1
          fi
          
          sleep 10
        done

    - name: Send rollback notification
      run: |
        # Slack notification
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "üîÑ Rollback Completed",
              "attachments": [{
                "color": "warning",
                "fields": [
                  {"title": "Action", "value": "Manual Rollback", "short": true},
                  {"title": "Version", "value": "${{ github.event.inputs.version }}", "short": true},
                  {"title": "Triggered By", "value": "${{ github.actor }}", "short": true}
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi
